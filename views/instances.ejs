<%- include('components/template') %>
<main>
   <div class="px-4 sm:px-6 lg:px-8">
      <dl class="mt-5 grid grid-cols-1 gap-5 sm:grid-cols-4">
      <% instances.forEach(function(instance) { %>
      <a href="../instance/<%= instance.ContainerId %>" class="p-3 hover:bg-[#171717] hover:scale-105 transition bg-transparent shadow-xl border border-white/5 rounded-lg overflow-hidden sm:p-6 lg:p-10">
         <div class="lg:flex lg:items-center lg:justify-between">
            <div class="min-w-0 flex-1">
               <h2 class="text-md font-medium text-white tracking-tight"><%= instance.Name %> <span id="statusBg" class="bg-neutral-600/20 text-neutral-400 text-sm ml-1.5 font-medium me-2 px-2.5 py-1 rounded-full"><span id="status">
                  <svg class="animate-spin h-3 w-3 text-white inline-flex mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                     <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                     <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg> loading...
               </span></span></h2>

               <div class="relative pt-4">
               <span class="border border-neutral-600/30 text-neutral-400 text-xs mb-2 font-medium me-2 px-2.5 py-1 rounded-full"><span id="ramUsage">
                  <svg class="animate-spin h-3 w-3 text-white inline-flex mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                     <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                     <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg> loading...
               </span><span id="ramLimit"></span></span>
               <span class="border border-neutral-600/30 text-neutral-400 text-xs mb-2 font-medium me-2 px-2.5 py-1 rounded-full"><span id="cpuUsage">
                  <svg class="animate-spin h-3 w-3 text-white inline-flex mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                     <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                     <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg> loading...
               </span></span>
            </div>
               <div class="relative pt-2">
               <span class="border border-neutral-600/30 text-neutral-400 text-xs font-medium me-2 px-2.5 py-1 rounded-full"><span id="networkIn">
                  <svg class="animate-spin h-3 w-3 text-white inline-flex mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                     <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                     <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg> loading...
               </span></span>
               <span class="border border-neutral-600/30 text-neutral-400 text-xs font-medium me-2 px-2.5 py-1 rounded-full"><span id="networkOut">
                  <svg class="animate-spin h-3 w-3 text-white inline-flex mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                     <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                     <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg> loading...
               </span></span>
            </div>
            </div>
         </div>
      </a>
      <script>
         const <%= instance.ContainerId %>socket = new WebSocket(`ws://localhost:3001/stats/<%= instance.ContainerId %>`);
         
         function formatBytes(bytes, decimals = 2) {
         if (bytes === 0) return '0.00 B';
         const k = 1024;
         const dm = decimals < 0 ? 0 : decimals;
         const sizes = ['B', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
         const i = Math.floor(Math.log(bytes) / Math.log(k));
         return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
         }
         
         <%= instance.ContainerId %>socket.onmessage = event => {
         const stats = JSON.parse(event.data);
         
         if (stats.error) {
         console.error('Error fetching stats:', stats.error);
         return;
         }
         
         // Update RAM usage
         const ramUsageRaw = stats.memory_stats.usage/1024;
         const ramUsage = isNaN(ramUsageRaw) ? '0 B' : formatBytes(ramUsageRaw);
         const ramLimitRaw = stats.memory_stats.limit/1024;
         const ramLimit = isNaN(ramLimitRaw) ? '0 B' : formatBytes(ramLimitRaw);
         document.getElementById('ramUsage').textContent = ramUsage;
         document.getElementById('ramLimit').textContent = ' / ' + ramLimit + ' RAM';
         
         // Determine status based on RAM usage
         const statusElement = document.getElementById('status');
         const statusBg = document.getElementById('statusBg');
         if (isNaN(ramUsageRaw)) {
         statusElement.className = 'text-neutral-500';
         statusElement.textContent = 'offline';
         } else if (ramUsageRaw > 1) {
         statusBg.classList.remove('bg-neutral-600/20');
         statusBg.classList.add('bg-emerald-600/10');
         statusElement.className = 'text-emerald-500';
         statusElement.textContent = 'online';
         }
         
         // Update CPU usage
         const cpuDelta = stats.cpu_stats.cpu_usage.total_usage - stats.precpu_stats.cpu_usage.total_usage;
         const systemCpuDelta = stats.cpu_stats.system_cpu_usage - stats.precpu_stats.system_cpu_usage;
         const cpuUsagePercent = (cpuDelta && systemCpuDelta && !isNaN(cpuDelta) && !isNaN(systemCpuDelta)) 
         ? ((cpuDelta / systemCpuDelta) * 100).toFixed(2) + '%' 
         : '0%';
         document.getElementById('cpuUsage').textContent = cpuUsagePercent + ' CPU USAGE';
         
         // Update Network stats
         const networkInRaw = stats.networks.eth0.rx_bytes;
         const networkOutRaw = stats.networks.eth0.tx_bytes;
         const networkIn = isNaN(networkInRaw) ? '0 B' : formatBytes(networkInRaw);
         const networkOut = isNaN(networkOutRaw) ? '0 B' : formatBytes(networkOutRaw);
         document.getElementById('networkIn').textContent = networkIn + ' NET IN';
         document.getElementById('networkOut').textContent = networkOut + ' NET OUT';
         };
      </script>
      <% }); %>
   </div>
</main>
<%- include('components/footer') %>